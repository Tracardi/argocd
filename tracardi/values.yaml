# Infrastructure

elastic:
  name: es1
  host: elastic-std-svc.elastic-standalone.svc.cluster.local
  schema: http
  authenticate: false
  port: 9200
  verifyCerts: "no"

redis:
  name: rd1
  host: redis-std-svc.redis-standalone.svc.cluster.local
  schema: "redis://"
  authenticate: false
  port: 6379
  db: "0"

pulsar:
  name: ps1
  host: pulsar-std-svc.pulsar-standalone.svc.cluster.local
  api: "http://pulsar-std-svc.pulsar-standalone.svc.cluster.local:8080"
  schema: "pulsar://"
  authenticate: false
  port: 6650
  cluster_name: pulsar

mysql:
  name: ms1
  host: percona-db-pxc-db-haproxy.percona.svc.cluster.local
  schema: "mysql+aiomysql://"
  database: "tracardi"
  port: 3306

tmsApi:
  host: be-fa-tms-svc.tracardi-com-090.svc.cluster.local

# Digital ocean

digitalOcean:
  loadBalancer: false
  certId: ""  # SET-CERT-ID


# Definition of defined secrets.

secrets:
  installationToken: "<SET-INSTALLATION-SECRET>"
  dockerHub: "tracardi-dockerhub"

  license:
    licenseKey: "<LICENSE-KEY-VALUE>"
    valueFrom:
      licenseKey:
        name: ""
        key: ""

  tms:
    tokenKey: "<SECRET-KEY-VALUE>"
    apiKey: "<API-KEY-VALUE>"

  redis:
    password: "<REDIS-PASSWORD>"
    valueFrom:
      password:
        name: ""
        key: ""

  elastic:
    username: "elastic"
    password: "<ELASTIC-PASSWORD>"
    valueFrom:
      username:
        name: ""
        key: ""
      password:
        name: ""
        key: ""

  pulsar:
    token: "<PULSAR-TOKEN>"
    valueFrom:
      token:
        name: ""
        key: ""

  mysql:
    username: "<MYSQL-USER>"
    password: "<MYSQL-PASSWORD>"
    valueFrom:
      username:
        name: ""
        key: ""
      password:
        name: ""
        key: ""

  maxmind:
    licenseKey: ""
    accountId: ""


  mergingToken: "1180015e-38d0-4eb7-8017-40e6a7937659"


# General Tracardi configuration. Version, images, multi-tenancy, etc.

config:
  multiTenant:
    multi: "no"
  storage:
    failOver:
      enabled: true
      size: 1Gi
  primaryId: "emm-"  # This value should be set only once during installation and never changed
  demo: "no"

api:
  image:
    repository: tracardi/com-tracardi-api
    pullPolicy: IfNotPresent
    tag: 0.9.0-rc3  # Tag should be the same for gui and backend
  test:
    enabled: true
    replicas: 1
    config:
      saveLogs: "yes"
      loggingLevel: "INFO"
      apiDocs: "yes"
      asyncProcessing: "yes"
      enableWorkflow: "yes"
      enableEventDestinations: "yes"
      enableProfileDestinations: "yes"
      enableIdentification: "yes"
      enableProfileFlush: "yes"
      eventPartitioning: "month"
      profilePartitioning: "quarter"
      sessionPartitioning: "quarter"
    storage:
      failOver:
        enabled: false
        size: 1Gi
    service:
      port: 8686

  production:
    enabled: true
    replicas: 1
    config:
      saveLogs: "yes"
      loggingLevel: "INFO"
      apiDocs: "no"
      asyncProcessing: "yes"
      enableWorkflow: "yes"
      enableEventDestinations: "yes"
      enableProfileDestinations: "yes"
      enableIdentification: "yes"
      enableProfileFlush: "yes"
      elasticSavePool: 0
      eventPartitioning: "month"
      profilePartitioning: "quarter"
      sessionPartitioning: "quarter"
    storage:
      failOver:
        enabled: false
        size: 1Gi
    service:
      port: 8585

gui:
  image:
    repository: tracardi/tracardi-gui
    pullPolicy: IfNotPresent
    tag: 0.9.0-rc3  # Tag should be the same for gui and backend
  console:
    enabled: true
    replicas: 1
    service:
        port: 8787
    config:
      mode: "with-deployment"

tms:
  image:
    repository: tracardi/tms
    pullPolicy: IfNotPresent
    tag: 0.9.0-rc3  # Tag should be the same for gui and backend
  docker:
    enabled: true
    replicas: 1
    config:
      loggingLevel: "INFO"
    service:
      port: 8383
      name: be-fa-tms-svc  # The name of tms service


worker:

  background:
    image:
      repository: tracardi/background-worker
      tag: 0.9.0-rc3
      pullPolicy: IfNotPresent
    enabled: true
    replicas: 1
    config:
      loggingLevel: "INFO"

  apm:
    image:
      repository: tracardi/apm
      tag: 0.9.0-rc3
      pullPolicy: IfNotPresent
    profile:
      enabled: true
      replicas: 1
      config:
        loggingLevel: "INFO"

  internal:

    upgrade:
      image:
        repository: tracardi/update-worker
        tag: 0.9.0-rc3
        pullPolicy: IfNotPresent
      docker:
        enabled: true
        replicas: 1
        config:
          saveLogs: "no"
          loggingLevel: "INFO"
        resources:
          limits:
            memory: 500Mi
            cpu: 500m

# Bridges. Services responsible for collection data from different channels. They bridge the defined transportation protocol to tracardi event source.

bridge:
  queue:
    image:
      repository: tracardi/com-bridge-queue
      tag: 0.9.0-rc3
      pullPolicy: IfNotPresent
    docker:
      enabled: false
      replicas: 1
      config:
        loggingLevel: "INFO"

# -----------------------------------------

copingWorker:
  enabled: false
  image:
    repository: tracardi/com-tracardi-coping-worker
    tag: 0.9.0-rc3
    pullPolicy: IfNotPresent
  config:
    saveLogs: "no"
    loggingLevel: "INFO"
