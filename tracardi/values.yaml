# Infrastructure

elastic:
  name: es1
  host: elastic-std-svc.elastic-standalone.svc.cluster.local
  schema: http
  authenticate: false
  port: 9200
  verifyCerts: "no"
  index:
    shards: 3
    replicas: 1

redis:
  name: rd1
  host: redis-std-svc.redis-standalone.svc.cluster.local
  schema: "redis://"
  authenticate: false
  port: 6379
  db: "0"

pulsar:
  name: ps1
  host: pulsar-std-svc.pulsar-standalone.svc.cluster.local
  api: "http://pulsar-std-svc.pulsar-standalone.svc.cluster.local:8080"
  schema: "pulsar://"
  authenticate: false
  port: 6650
  cluster_name: pulsar
  enabled: true

mysql:
  name: ms1
  host: percona-db-pxc-db-haproxy.percona.svc.cluster.local
  schema: "mysql+aiomysql://"
  database: "tracardi"
  port: 3306

tmsApi:
  host: be-fa-tms-svc.tracardi-com-090.svc.cluster.local
  database: "tms"

telemetry:
  disabled: true
  name: "tracardi"
  log_level: "info"
  export:
    endpoint: "" # e.g.http://localhost:4317  # OTEL_EXPORTER_OTLP_ENDPOINT
    headers: ""  # Use when needed
    metrics: "" # Use when needed
    logs: "" # Use when needed
    attributes: "" # Use when needed
    time_out: 30000
    delay: 5000
    batch_size: 512


# Digital ocean

digitalOcean:
  loadBalancer: false
  certId: ""  # SET-CERT-ID


# General Tracardi configuration. Version, images, multi-tenancy, etc.

config:
  multiTenant:
    multi: "no"
  storage:
    failOver:
      enabled: false
      size: 1Gi
  primaryId: "emm-"  # This value should be set only once during installation and never changed
  demo: "no"
  systemEvents: "yes"
  enableVisitEnded: "no"
  visit:
    close: 1200  # Close visit after 20 min



# Definition of defined secrets.

secrets:
  dockerHub: "tracardi-dockerhub"

  installation:
    token: "tracardi"  # Random value
    valueFrom:
      token:
        name: ""
        key: ""

  license:
    licenseKey: ""
    valueFrom:
      licenseKey:
        name: ""
        key: ""

  tms:
    secretKey: ""  # Random value
    apiKey: ""    # Random value
    valueFrom:
      secretKey:
        name: ""
        key: ""
      apiKey:
        name: ""
        key: ""

  redis:
    password: ""
    valueFrom:
      password:
        name: ""
        key: ""

  elastic:
    username: "elastic"
    password: ""
    valueFrom:
      username:
        name: ""
        key: ""
      password:
        name: ""
        key: ""

  pulsar:
    token: ""
    valueFrom:
      token:
        name: ""
        key: ""

  mysql:
    username: ""
    password: ""
    valueFrom:
      username:
        name: ""
        key: ""
      password:
        name: ""
        key: ""

  maxmind:
    licenseKey: ""
    accountId: ""
    valueFrom:
      licenseKey:
        name: ""
        key: ""
      accountId:
        name: ""
        key: ""

  mergingToken: "1180015e-38d0-4eb7-8017-40e6a7937659"  # Random value

api:
  image:
    repository: tracardi/com-tracardi-api
    pullPolicy: IfNotPresent
    tag: 0.9.0.3  # Tag should be the same for gui and backend
  private:
    enabled: true
    replicas: 1
    config:
      saveLogs: "yes"
      loggingLevel: "INFO"
      apiDocs: "yes"
      enableWorkflow: "yes"
      enableEventDestinations: "yes"
      enableProfileDestinations: "yes"
      enableIdentification: "yes"
      eventPartitioning: "month"
      profilePartitioning: "quarter"
      sessionPartitioning: "quarter"
    storage:
      failOver:
        enabled: false
        size: 1Gi
    service:
      port: 8686

  public:
    enabled: true
    spread:
      rules:
        topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: ScheduleAnyway
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: be-fa-public
    replicas: 1
    config:
      saveLogs: "no"
      loggingLevel: "WARNING"
      apiDocs: "no"
      enableWorkflow: "yes"
      enableEventDestinations: "yes"
      enableProfileDestinations: "yes"
      enableIdentification: "yes"
      eventPartitioning: "month"
      profilePartitioning: "quarter"
      sessionPartitioning: "quarter"
    storage:
      failOver:
        enabled: false
        size: 1Gi
    service:
      port: 8585

gui:
  image:
    repository: tracardi/tracardi-gui
    pullPolicy: IfNotPresent
    tag: 0.9.0.3  # Tag should be the same for gui and backend
  console:
    enabled: true
    replicas: 1
    service:
        port: 8787
    config:
      mode: "with-deployment"
      allowUpdatesOnProduction: "no"

tms:
  image:
    repository: tracardi/tms
    pullPolicy: IfNotPresent
    tag: 0.9.0.3  # Tag should be the same for gui and backend
  docker:
    enabled: true
    replicas: 1
    config:
      loggingLevel: "INFO"
    service:
      port: 8383
      name: be-fa-tms-svc  # The name of tms service


worker:

  background:
    image:
      repository: tracardi/background-worker
      tag: 0.9.0.3
      pullPolicy: IfNotPresent
    enabled: true
    replicas: 1
    spread:
      rules:
        topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: ScheduleAnyway
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: wk-pl-background
    config:
      loggingLevel: "INFO"
      bulker:
        # Data Bulker
        #
        # The Data Bulker Configuration are setting for message bulker that is responsible for collecting messages and
        # managing them for background storage operations.
        #
        # It operates by enforcing two main constraints: a size limit, which is the maximum number of messages the queue can
        # hold, and a time limit, which dictates how long messages can remain in the queue. If either of these limits is
        # exceeded, the queued data is flushed to storage.
        #
        # Additionally, if no new data arrives within a specified period of inactivity, a timeout is triggered that
        # automatically flushes any remaining data in the queue that has not yet been processed.
        maxTimeInBuffer: 5  # TimeLimit: Flush data to storage every X sec
        bufferInactivityTimeOut: 10000 # If there is no data in then flash remaining buffer to storage in X milliseconds
        minBatchSize: 200  # SizeLimit: Min number of messages in the queue buffer
        maxBatchSize: 1000  # SizeLimit: Max number of messages in the queue buffer


  apm:
    image:
      repository: tracardi/apm
      tag: 0.9.0.3
      pullPolicy: IfNotPresent
    profile:
      enabled: true
      replicas: 1
      config:
        loggingLevel: "INFO"

  upgrade:
    image:
      repository: tracardi/update-worker
      tag: 0.9.0.3
      pullPolicy: IfNotPresent
    docker:
      enabled: true
      replicas: 1
      config:
        saveLogs: "no"
        loggingLevel: "INFO"
      resources:
        limits:
          memory: 500Mi
          cpu: 500m

# Bridges. Services responsible for collection data from different channels. They bridge the defined transportation protocol to tracardi event source.

bridge:
  queue:
    image:
      repository: tracardi/com-bridge-queue
      tag: 0.9.0.3
      pullPolicy: IfNotPresent
    docker:
      enabled: false
      replicas: 1
      config:
        loggingLevel: "INFO"

# -----------------------------------------

copingWorker:
  enabled: false
  image:
    repository: tracardi/com-tracardi-coping-worker
    tag: 0.9.0.3
    pullPolicy: IfNotPresent
  config:
    saveLogs: "no"
    loggingLevel: "INFO"
